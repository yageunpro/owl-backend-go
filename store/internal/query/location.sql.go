// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: location.sql

package query

import (
	"context"

	uuid "github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const createLocation = `-- name: CreateLocation :exec
INSERT INTO location.location (id, query_id, title, address, category, map_x, map_y)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateLocationParams struct {
	ID       uuid.UUID
	QueryID  uuid.UUID
	Title    string
	Address  string
	Category string
	MapX     int32
	MapY     int32
}

func (q *Queries) CreateLocation(ctx context.Context, arg CreateLocationParams) error {
	_, err := q.db.Exec(ctx, createLocation,
		arg.ID,
		arg.QueryID,
		arg.Title,
		arg.Address,
		arg.Category,
		arg.MapX,
		arg.MapY,
	)
	return err
}

const createQuery = `-- name: CreateQuery :exec
INSERT INTO location.query (id, data)
VALUES ($1, $2)
`

type CreateQueryParams struct {
	ID   uuid.UUID
	Data string
}

func (q *Queries) CreateQuery(ctx context.Context, arg CreateQueryParams) error {
	_, err := q.db.Exec(ctx, createQuery, arg.ID, arg.Data)
	return err
}

const deprecateQuery = `-- name: DeprecateQuery :exec
UPDATE location.location
SET deleted_at = NOW()
WHERE query_id = $1
`

func (q *Queries) DeprecateQuery(ctx context.Context, queryID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deprecateQuery, queryID)
	return err
}

const findQueryId = `-- name: FindQueryId :one
SELECT id, updated_at
FROM location.query
WHERE data = $1
`

type FindQueryIdRow struct {
	ID        uuid.UUID
	UpdatedAt pgtype.Timestamptz
}

func (q *Queries) FindQueryId(ctx context.Context, data string) (FindQueryIdRow, error) {
	row := q.db.QueryRow(ctx, findQueryId, data)
	var i FindQueryIdRow
	err := row.Scan(&i.ID, &i.UpdatedAt)
	return i, err
}

const getLocation = `-- name: GetLocation :one
SELECT id, title, address, category, map_x, map_y
FROM location.location
WHERE id = $1
`

type GetLocationRow struct {
	ID       uuid.UUID
	Title    string
	Address  string
	Category string
	MapX     int32
	MapY     int32
}

func (q *Queries) GetLocation(ctx context.Context, id uuid.UUID) (GetLocationRow, error) {
	row := q.db.QueryRow(ctx, getLocation, id)
	var i GetLocationRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Address,
		&i.Category,
		&i.MapX,
		&i.MapY,
	)
	return i, err
}

const getLocationWithQueryId = `-- name: GetLocationWithQueryId :many
SELECT id, title, address, category, map_x, map_y
FROM location.location
WHERE deleted_at IS NULL
  AND query_id = $1
`

type GetLocationWithQueryIdRow struct {
	ID       uuid.UUID
	Title    string
	Address  string
	Category string
	MapX     int32
	MapY     int32
}

func (q *Queries) GetLocationWithQueryId(ctx context.Context, queryID uuid.UUID) ([]GetLocationWithQueryIdRow, error) {
	rows, err := q.db.Query(ctx, getLocationWithQueryId, queryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetLocationWithQueryIdRow
	for rows.Next() {
		var i GetLocationWithQueryIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Address,
			&i.Category,
			&i.MapX,
			&i.MapY,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQueryTime = `-- name: UpdateQueryTime :exec
UPDATE location.query
SET updated_at = NOW()
WHERE id = $1
`

func (q *Queries) UpdateQueryTime(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, updateQueryTime, id)
	return err
}
